#!/bin/sh
. profile

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running."
    while [[ $(pgrep -c "panel") != 0 ]]
    do
        pkill -n -9 "panel"
    done
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT
#Track the current offset for making multiple bars per monitor.
CUR_X_OFFSET=0
num_mon=$(bspc query -M)

for i in $num_mon; do
    [ -e "$PANEL_FIFO$i" ] && rm "$PANEL_FIFO$i"

    mkfifo "$PANEL_FIFO$i"

    #This greps out the bspc control section of the current monitor we are on
    #this is why sorting the `bspc query -M` above is important.
    #the while loop in the middle appends 'W' to the start because the panel_bar
    #script assumes input from a 'regular' bspc control --subscribe command
    bspc control --subscribe |\
        grep -oE "[Mm]$i[^TM]*[TM]" --line-buffered |\
        while read line; do echo W$line; done \
            > "$PANEL_FIFO$i" &

    #xtitle -t 80 -sf 'T>>A%sî‚±//' > "$PANEL_FIFO$i" &
    title.sh $i > "$PANEL_FIFO$i" &

    info.sh > "$PANEL_FIFO$i" &

    #Grep for current monitor width (will be first number regex match from bspc query command below)
    CUR_MON_WIDTH=$(bspc query -T -m $i | grep -oE "[0-9]{2,6}" | head -n 1)

    #IMO the below looks kinda scary, but a large reason for the length
    #is the verbose variable names :)
    #
    #This will account for bar gap settings and current monitor offsets.
    cat "$PANEL_FIFO$i" | panel_bar |\
        bar-aint-recursive -g $(expr $CUR_MON_WIDTH - $(expr $PANEL_GAP + $PANEL_GAP))x$PANEL_HEIGHT+$(expr $CUR_X_OFFSET + $PANEL_GAP)+$PANEL_GAP -f "$PANEL_FONT_FAMILY" -F "$pFG" -B "$pBG"   | sh &


    #Increment the x offset for the next monitor.
    CUR_X_OFFSET=$(expr $CUR_X_OFFSET + $CUR_MON_WIDTH )
done

wait

